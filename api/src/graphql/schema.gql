type User @isAuthenticated {
	uid: ID!
    username: String!
	firstname: String!
	lastname: String!
	email: String!
	passsword: String!
	birthdate: String!
	gender: String
	images: [Image] @relation(name: "HAS_IMG", direction: "OUT")
	avatar: String! @cypher(statement: "MATCH (this)-[r:HAS_IMG]->(i:Image) RETURN collect(i)[0].src")
	bio: String
	tags: [Tag] @relation(name: "HAS_TAG", direction: "OUT")
	elo: Int!
	prefAgeMin: Int
	prefAgeMax: Int
	prefOrientation: String
	prefDistance: Int
	confirmToken: String!
	resetToken: String!
	likesCount: Int @cypher(statement: "MATCH (User)-[r:LIKED]->(this) RETURN COUNT(r)")
	likedUsers: [User] @relation(name: "LIKED", direction: "OUT")
	likedByUsers: [User] @relation(name: "LIKED", direction: "IN")
	dislikedUsers: [User] @relation(name: "DISLIKED", direction: "OUT")
	dislikedByUsers: [User] @relation(name: "DISLIKED", direction: "IN")
	visitedUsers: [User] @relation(name: "VISITED", direction: "OUT")
	visitedByUsers: [User] @relation(name: "VISITED", direction: "IN")
	conversations: [Conversation] @relation(name: "HAS_CONV", direction: "OUT")
	notifications: [Notification] @relation(name: "HAS_NOTIF", direction: "OUT")
    isConnected: Boolean!
	lastVisite: String!
	lat: String!
	long: String!
	location: String!
}

type Image @isAuthenticated {
	uid: ID!
	src: String!
}

type Tag @isAuthenticated {
	uid: ID!
	name: String!
}

type Conversation @isAuthenticated {
    uid: ID!
    lastMessage: Message @cypher(statement: "MATCH (this)-[:HAS_MSG]-(msgs:Message) RETURN msgs ORDER BY msgs.uid DESC LIMIT 1")
    messages: [Message] @relation(name: "HAS_MSG", direction: "OUT")
    members: [User] @relation(name: "HAS_CONV", direction: "IN")
}

type Message @isAuthenticated {
    uid: ID!
    author: User @relation(name: "AUTHORED", direction: "IN")
    content: String!
}

type Notification @isAuthenticated {
  uid: ID!
  type: String!
  title: String!
  message: String!
}


type Blocked @isAuthenticated @relation(name: "BLOCKED") {
    uid: ID!
    from: User!
    to: User!
    at: String!
}

type Query {
    me: User @cypher(statement: "MATCH (user:User {uid: $cypherParams.currentUserUid}) RETURN user")
    getReportedUsers: [User]
}

type Mutation {
    signup (firstname: String!, lastname: String!, username: String!, email: String!, password: String!, lat: String!, long: String!, location: String!): String
    login(username: String!, password: String!, lat: String!, long: String!, location: String!): String
    logout: String
    emailVerif(confirmToken: String!): String
    sendPwdReset(email: String!): String
    resetPassword(password: String!, resetToken: String!): String
    visitProfile(uid: ID!): User
    likeUser(uid: ID!): ID
    dislikeUser(uid: ID!): ID
    #dislikeUser(uid: ID!): ID @cypher(statement: "MATCH (me:User {uid: $cypherParams.currentUserUid}), (target:User {uid: $uid}) WHERE NOT me = target MERGE (me)-[:DISLIKED]->(target) RETURN $uid")
    blockUser(uid: ID!): ID @cypher(statement: "MATCH (me:User {uid: $cypherParams.currentUserUid}), (target:User {uid: $uid}) WHERE NOT me = target MERGE (me)-[:BLOCKED]->(target) RETURN $uid")
    reportUser(uid: ID!): Int
	uploadImage(src: String!): Image @cypher(statement: "MATCH (user:User {uid: $cypherParams.currentUserUid})-[r:HAS_IMG]->(:Image) WITH user, COUNT(r) as rcount FOREACH ( _ in CASE WHEN rcount < 5 THEN [1] ELSE [] END | CREATE (user)-[:HAS_IMG]->(img:Image {uid: 'img-' + $cypherParams.uniqid, src: $src}) ) WITH user MATCH (user)-[:HAS_IMG]->(img:Image) RETURN img ORDER BY img.uid DESC LIMIT 1")
	deleteImage(uid: ID!): ID @cypher(statement: "MATCH (user:User {uid: $cypherParams.currentUserUid})-[r:HAS_IMG]->(:Image), (img:Image {uid: $uid}) WITH user, img, COUNT(r) as rcount FOREACH ( _ in CASE WHEN rcount > 1 THEN [1] ELSE [] END | DETACH DELETE img ) RETURN $uid")
	banUser(uid: ID!): String
}

type UserState {
  user: User!
  state: Int!
}

type Subscription {
  connect: String
  userStateChanged(uid: ID!): UserState
  receivedNotification(uid: ID!): Notification
}
